name: Create Repository w/o template 

on:
  workflow_dispatch:
    inputs:
      repository_name:
        description: 'Enter the name of the new repository'
        required: true
      description:
        description: 'Description'
        required: true

jobs:
  create_repository:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Repository 
        run: |
          # Set variables from GitHub event inputs
          REPO_NAME="${{ github.event.inputs.repository_name }}"
          BRANCHES="qa,dev"
          DEFAULT_BRANCH="prod"  # Setting default branch to "prod"
          WORKFLOW_FILES="demo_workflow_file1.yml,demo_workflow_file2.yml,demo_workflow_file3.yml"  # Comma-separated list of workflow files
          
          # Create a new public repository
          curl -X POST \
            -H "Authorization: token ${{ secrets.API_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/user/repos \
            -d '{"name": "'"$REPO_NAME"'","private":false}'
          
          # Wait for repository creation to complete
          sleep 10
          
          # Add a README file to the repository on the main branch
          curl -X PUT -H "Authorization: token ${{ secrets.API_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ secrets.username }}/$REPO_NAME/contents/README.md \
            -d @- <<EOF
          {
            "message": "Add README.md",
            "content": "$(echo -n '# New Repo from Template' | base64)"
          }
          EOF
          
          # Retrieve the SHA of the main branch (or default branch if already set)
          DEFAULT_BRANCH_SHA=$(git ls-remote https://github.com/${{ secrets.username }}/$REPO_NAME refs/heads/main | cut -f1)
          
          # Create the prod branch based on the main branch SHA
          curl -X POST \
            -H "Authorization: token ${{ secrets.API_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
          -d "{\"ref\": \"refs/heads/$DEFAULT_BRANCH\", \"sha\": \"$DEFAULT_BRANCH_SHA\"}" \
            "https://api.github.com/repos/${{ secrets.username }}/$REPO_NAME/git/refs"
          
          # Retrieve the SHA of the README.md file on the main branch
          README_SHA=$(curl -s -H "Authorization: token ${{ secrets.API_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ secrets.username }}/$REPO_NAME/contents/README.md?ref=main" | jq -r .sha)
          
          # Copy the README.md file to the prod branch
          curl -X PUT -H "Authorization: token ${{ secrets.API_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ secrets.username }}/$REPO_NAME/contents/README.md \
            -d @- <<EOF
          {
            "message": "Copy README.md to prod",
            "content": "$(echo -n '# New Repo from Template' | base64)",
            "branch": "$DEFAULT_BRANCH",
            "sha": "$README_SHA"
          }
          EOF
          
          # Split branch names into an array
          IFS=',' read -ra BRANCH_LIST <<< "$BRANCHES"
          
          # Create additional branches based on the prod branch SHA
          PROD_BRANCH_SHA=$(git ls-remote https://github.com/${{ secrets.username }}/$REPO_NAME refs/heads/$DEFAULT_BRANCH | cut -f1)
          for branch in "${BRANCH_LIST[@]}"; do
            branch_name="$(echo -e "${branch}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
            
            if [ -n "$branch_name" ]; then
              curl -X POST \
                -H "Authorization: token ${{ secrets.API_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
              -d "{\"ref\": \"refs/heads/$branch_name\", \"sha\": \"$PROD_BRANCH_SHA\"}" \
                "https://api.github.com/repos/${{ secrets.username }}/$REPO_NAME/git/refs"
            fi
          done
          
          # Copy specific workflow files to the prod branch
          IFS=',' read -ra WORKFLOW_LIST <<< "$WORKFLOW_FILES"
          for workflow_file in "${WORKFLOW_LIST[@]}"; do
            workflow_file="$(echo -e "${workflow_file}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
            
            # Retrieve the content and SHA of the workflow file from the main branch
            workflow_content=$(curl -s -H "Authorization: token ${{ secrets.API_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ secrets.username }}/$REPO_NAME/contents/.github/workflows/$workflow_file?ref=main")
          
            workflow_sha=$(echo "$workflow_content" | jq -r .sha)
            workflow_encoded_content=$(echo "$workflow_content" | jq -r .content)
          
            # Copy the workflow file to the prod branch
            curl -X PUT -H "Authorization: token ${{ secrets.API_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/${{ secrets.username }}/$REPO_NAME/contents/.github/workflows/$workflow_file \
              -d @- <<EOF
          {
            "message": "Copy $workflow_file to prod",
            "content": "$workflow_encoded_content",
            "branch": "$DEFAULT_BRANCH",
            "sha": "$workflow_sha"
          }
          EOF
          done
          
          # Set branch protection rules for each branch
          for branch in "${BRANCH_LIST[@]}"; do
            branch_name="$(echo -e "${branch}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
            
            if [ -n "$branch_name" ]; then
              curl -X PUT \
                -H "Authorization: token ${{ secrets.API_TOKEN }}" \
                -H "Accept: application/vnd.github.v3+json" \
                https://api.github.com/repos/${{ secrets.username }}/$REPO_NAME/branches/$branch_name/protection \
                -d @- <<EOF
          {
            "required_status_checks": {
              "strict": true,
              "contexts": []
            },
            "enforce_admins": true,
            "required_pull_request_reviews": {
              "dismiss_stale_reviews": true,
              "require_code_owner_reviews": true,
              "required_approving_review_count": 1
            },
            "restrictions": null
          }
          EOF
            fi
          done
          
          # Set the default branch to "prod"
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.API_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ secrets.username }}/$REPO_NAME \
            -d "{\"default_branch\": \"$DEFAULT_BRANCH\"}"
          
          # Delete the "main" branch
          curl -X DELETE \
            -H "Authorization: token ${{ secrets.API_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ secrets.username }}/$REPO_NAME/git/refs/heads/main
          
          # Make the repository private
          curl -X PATCH \
            -H "Authorization: token ${{ secrets.API_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ secrets.username }}/$REPO_NAME \
            -d '{"private": true}'
          